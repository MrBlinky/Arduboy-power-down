#include "autopowerdown.h"

volatile uint8_t APD_timer; //bits 7-1: timer value, bit 0: power down flag

/*******************************************************************************
WDT interrupt service routine

Counts down APD timer and sets power down flag

Note:
Arduino USB CDC class will disable and reset WDT. Put a copy of CDC.cpp in your
sketch folder, edit it, find CDC_Setup and put // in front of wdt_disable() and
in front of wdt_reset().
Do not set baudrate to 1200 on the host (PC) side when opening a serial port 
unless you want to start your Arduboy in bootloader mode.
*******************************************************************************/

ISR (WDT_vect, ISR_NAKED) //(30 bytes)
{
  asm volatile(
    "    push  r16                \n\t"
    "    in	   r16, __SREG__      \n\t"  
    "    push  r16                \n\t"  
    "    lds   r16, %[APD_timer]  \n\t" //if (APD_timer > 1) APD_timer -= 2;
    "    subi  r16, 2             \n\t"  
    "    brcs  2f                 \n\t"  
    "    brne  1f                 \n\t"  
    "                             \n\t"  
    "    ldi   r16, 1             \n\t" //else APD_timer = 1 (power down flag)
    "1:                           \n\t"  
    "    sts   %[APD_timer], r16  \n\t"  
    "2:                           \n\t"  
    "    pop   r16                \n\t"  
    "    out   __SREG__, r16      \n\t"  
    "    pop   r16                \n\t"  
    "    reti                     \n\t"  
    :                                    
    : [APD_timer] "" (APD_timer)
  );
}

/*******************************************************************************
INT6 external interrupt service routine
Generated by pressing the A BUTTON. 
*******************************************************************************/

ISR (INT6_vect, ISR_NAKED)
{
  asm volatile(
    "    reti                     \n\t"  
  );
}
    
/*******************************************************************************
autoPowerDownInit

Enables WDT interrupt for clock, auto power down and auto power on features.
Default timeout is 1 second.
*******************************************************************************/

void autoPowerDownReset()
{
  wdt_interrupt_enable(APD_INTERVAL);
  APD_timer = APD_VALUE;
}

void autoPowerDown()
{
  if (APD_timer & 1)
  {
    wdt_interrupt_disable();
  #ifndef ARDUBOY_NO_USB
    UDIEN = 0;            //disable USB interrupts left enabled after upload
    USBCON = _BV(FRZCLK); //disable VBUS transition interrupt, freeze USB clock for power savings
    UDCON  = 1 << DETACH; //disconnect from USB bus
  #endif
    all_LEDs_off();
    RST_PORT &= ~(_BV(RST_BIT)); //turn OLED off by simply resetting it (Saves as much power as using displayOff() )
    INT6_enable();               //enable A button interrupt
    activatePowerDown();
    INT6_disable();
  #ifndef ARDUBOY_NO_USB
    init();                      //restore USB support
    USBDevice.attach(); 
  #endif
    Arduboy2Core::displayOn();
    autoPowerDownReset();
  }
  if (Arduboy2Core::buttonsState()) autoPowerDownReset(); //reset power down time on any button press
}